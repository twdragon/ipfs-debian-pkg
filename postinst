#!/bin/bash
set -e
source /usr/share/debconf/confmodule
db_version 2.0

#!/bin/sh

set -e

function generate_systemd_unit {
    SYSTEMD_UNIT_PATH="/lib/systemd/system/ipfs.service"
    IPFS_SERVICE_NAME="ipfs"

    cat << 'EOM' > "${SYSTEMD_UNIT_PATH}"
[Unit]
Description=IPFS single node control service - P2P distributed content-based CDN with file frontend
Documentation=https://docs.ipfs.io/
After=syslog.target network.target remote-fs.target nss-lookup.target

[Service]
Type=notify
EOM

    db_get ipfs-kubo/repository-directory || true
    echo -e "Environment=IPFS_PATH=${RET}" >> "${SYSTEMD_UNIT_PATH}"
    db_get ipfs-kubo/predefined-config || true
    echo -e "Environment=IPFS_CONFIG=${RET}" >> "${SYSTEMD_UNIT_PATH}"
    db_get ipfs-kubo/predefined-config || true
    echo -e "Environment=IPFS_CONFIG=${RET}" >> "${SYSTEMD_UNIT_PATH}"
    db_get ipfs-kubo/memory-quota || true
    MEMQUOTA="unlimited"
    MEMHIGH="unlimited"
    case "${RET}" in
        512MiB)
            MEMQUOTA=536870912
            MEMHIGH=402653184 # 384MiB
        ;;
        1GiB)
            MEMQUOTA=1073741824
            MEMHIGH=805306368 # 768MiB
        ;;
        2GiB)
            MEMQUOTA=2147483648
            MEMHIGH=1879048192 # 1.75GiB
        ;;
        4GiB)
            MEMQUOTA=4294967296
            MEMHIGH=3221225472 # 3GiB
        ;;
        6GiB)
            MEMQUOTA=6442450944
            MEMHIGH=5368709120 # 5GiB
        ;;
        8GiB)
            MEMQUOTA=8589934592
            MEMHIGH=7516192768 # 7GiB
        ;;
        12GiB)
            MEMQUOTA=12884901888
            MEMHIGH=10737418240 # 10GiB
        ;;
        *)
            MEMQUOTA="unlimited"
        ;;
    esac
    if [[ "${MEMQUOTA}" != "unlimited" ]]
    then
        cat << 'EOM' >> "${SYSTEMD_UNIT_PATH}"
# Memory accounting: Golang
Environment=GOMEMLIMIT=${MEMQUOTA}
# Memory accounting: systemd
MemoryAccounting=true
MemoryHigh=${MEMHIGH}
MemoryMax=${MEMQUOTA}
EOM
    else
        echo -e "MemoryAccounting=false" >> "${SYSTEMD_UNIT_PATH}"
    fi
    db_get ipfs-kubo/cpu-quota || true
    if [[ "${RET}" != "unlimited" ]]
    then
        CPUQUOTA=$(("${RET}" * 100))
        cat << 'EOM' >> "${SYSTEMD_UNIT_PATH}"
# CPU accounting: systemd
CPUAccounting=true
CPUQuota=${CPUQUOTA}
EOM
    else
        echo -e "CPUAccounting=false" >> "${SYSTEMD_UNIT_PATH}"
    fi
    cat << 'EOM' >> "${SYSTEMD_UNIT_PATH}"
#Runtime
TimeoutStartSec=600
ExecStart=/util/bin/ipfs daemon --migrate --enable-gc
TimeoutSec=120
Restart=on-failure
RestartSec=120
KillSignal=SIGINT
RuntimeMaxSec=172800
MemorySwapMax=0
EOM

    db_get ipfs-kubo/hardened || true
    if [[ "${RET}" == "true" ]]
    then
        db_set ipfs-kubo/system-wide "true" || true
        cat << 'EOM' >> "${SYSTEMD_UNIT_PATH}"
# Hardened mode
NoNewPrivileges=true
ProtectSystem=strict
ProtectKernelTunables=true
ProtectKernelModules=true
ProtectKernelLogs=true
PrivateDevices=true
DevicePolicy=closed
ProtectControlGroups=true
RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6 AF_NETLINK
ProtectHostname=true
PrivateTmp=true
ProtectClock=true
LockPersonality=true
RestrictNamespaces=true
RestrictRealtime=true
MemoryDenyWriteExecute=true
SystemCallArchitectures=native
SystemCallFilter=@system-service
SystemCallFilter=~@privileged
ProtectHome=true
RemoveIPC=true
RestrictSUIDSGID=true
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
EOM
        db_get ipfs-kubo/repository-directory || true
        echo -e "ReadWritePaths=${RET}" >> "${SYSTEMD_UNIT_PATH}"
    fi
    db_get ipfs-kubo/user-name || true
    echo -e "User=${RET}" >> "${SYSTEMD_UNIT_PATH}"
    echo -e "Group=${RET}" >> "${SYSTEMD_UNIT_PATH}"

    cat << 'EOM' >> "${SYSTEMD_UNIT_PATH}"
[Install]
WantedBy=default.target
EOM

}

case "$1" in
    configure)
        # Searching for instantiated templates
        
        # Generate and install the systemd unit file
        systemctl enable $IPFS_SERVICE_NAME
        systemctl start $IPFS_SERVICE_NAME
    ;;

    upgrade)
        systemctl daemon-reload
        systemctl restart $IPFS_SERVICE_NAME
    ;;

    remove|deconfigure)
        # Stop the IPFS service and remove the systemd unit file
        systemctl stop $IPFS_SERVICE_NAME
        systemctl disable $IPFS_SERVICE_NAME
        rm -f $SYSTEMD_UNIT_PATH
    ;;

    purge)
        # Purge all related files and directories
        systemctl stop $IPFS_SERVICE_NAME
        systemctl disable $IPFS_SERVICE_NAME
        rm -f $SYSTEMD_UNIT_PATH
        # Add commands to remove any additional IPFS-related files and directories
        # Example: rm -rf /var/lib/ipfs
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

exit 0

