on:
    schedule:
        - cron: '30 15 * * *'
    push:
        branches:
            - 'master'
defaults:
    run:
        shell: bash
jobs:
    version_analyzer:
        runs-on: ubuntu-latest
        timeout-minutes: 5
        outputs:
            build_kubo: ${{ steps.version_compare.outputs.kubo }}
            build_relay: ${{ steps.version_compare.outputs.relay }}
            build_ipfsgit: ${{ steps.version_compare.outputs.ipfsgit }}
        steps:
            - name: Extract last versions from Debian repository and store them in the GitHub CI environment variables
              run: |
                echo -e "# IPFS Debian Package Builder CI Process \n\nBuild started: $(date +"%a, %d %b %Y %H:%M:%S %z")" >> ${GITHUB_STEP_SUMMARY}
                echo -e "Run ID: \`${GITHUB_RUN_NUMBER}\`" >> ${GITHUB_STEP_SUMMARY}
                echo -e "Workflow version: \`${GITHUB_WORKFLOW_SHA}\`" >> ${GITHUB_STEP_SUMMARY}
                echo -e "Trigger: \`${GITHUB_EVENT_NAME}\`" >> ${GITHUB_STEP_SUMMARY}
                echo -e "\n## Version analyzer\n" >> ${GITHUB_STEP_SUMMARY}
                echo 'Extracting version information from https://ppa.launchpadcontent.net/twdragon/ipfs/ubuntu/dists/jammy/main/source/Sources.gz' >> ${GITHUB_STEP_SUMMARY}
                curl https://ppa.launchpadcontent.net/twdragon/ipfs/ubuntu/dists/jammy/main/source/Sources.gz --output Sources.gz
                gzip --decompress Sources.gz
                IPFS_KUBO_VERSION_REPO=$(grep -A 10 "^Package: ipfs-kubo" Sources | grep -Po '(?<=^Version: )[0-9]+\.[0-9]+\.[0-9]+')
                LIBP2PRELAY_VERSION_REPO=$(grep -A 10 "^Package: libp2p-relay" Sources | grep -Po '(?<=^Version: )[0-9]+\.[0-9]+\.[0-9]+')
                GITIPFS_VERSION_REPO=$(grep -A 10 "^Package: git-ipfs-remote-bridge" Sources | grep -Po '(?<=^Version: )[0-9]+\.[0-9]+\.[0-9]+')
                echo "IPFS_KUBO_VERSION_REPO=${IPFS_KUBO_VERSION_REPO}" >> ${GITHUB_ENV}
                echo -e "\`\`\`\nIPFS_KUBO_VERSION_REPO=${IPFS_KUBO_VERSION_REPO}" >> ${GITHUB_STEP_SUMMARY}
                echo "LIBP2PRELAY_VERSION_REPO=${LIBP2PRELAY_VERSION_REPO}" >> ${GITHUB_ENV}
                echo -e "LIBP2PRELAY_VERSION_REPO=${LIBP2PRELAY_VERSION_REPO}" >> ${GITHUB_STEP_SUMMARY}
                echo "GITIPFS_VERSION_REPO=${GITIPFS_VERSION_REPO}" >> ${GITHUB_ENV}
                echo -e "GITIPFS_VERSION_REPO=${GITIPFS_VERSION_REPO}\n\`\`\`" >> ${GITHUB_STEP_SUMMARY}
            - name: Clone IPFS Kubo
              uses: actions/checkout@v4
              with:
                submodules: 'true'
                fetch-depth: 0
                repository: 'ipfs/kubo'
                path: 'kubo'
            - name: Clone libp2p relay daemon
              uses: actions/checkout@v4
              with:
                submodules: 'true'
                fetch-depth: 0
                repository: 'libp2p/go-libp2p-relay-daemon'
                path: 'libp2p-relay'
            - name: Clone Git IPFS Remote Bridge
              uses: actions/checkout@v4
              with:
                submodules: 'true'
                fetch-depth: 0
                repository: 'ElettraSciComp/Git-IPFS-Remote-Bridge'
                path: 'git-ipfs-remote-bridge'
            - name: Clone Debian maintaner scripts repository
              uses: actions/checkout@v4
              with:
                path: 'debian-scripts'
            - name: Extract last versions from Github repositories and store them in the GitHub CI environment variables
              run: |
                echo -e "\nExtracting and analyzing annotated tags from Git repositories." >> ${GITHUB_STEP_SUMMARY}
                cd kubo
                IPFS_KUBO_VERSION=$(git describe --tags --abbrev=0 | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
                cd ../libp2p-relay
                LIBP2PRELAY_VERSION=$(git describe --tags --abbrev=0 | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
                cd ../git-ipfs-remote-bridge
                GITIPFS_VERSION=$(git describe --tags --abbrev=0 | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
                echo "IPFS_KUBO_VERSION=${IPFS_KUBO_VERSION}" >> ${GITHUB_ENV}
                echo -e "\`\`\`\nIPFS_KUBO_VERSION=${IPFS_KUBO_VERSION}" >> ${GITHUB_STEP_SUMMARY}
                echo "LIBP2PRELAY_VERSION=${LIBP2PRELAY_VERSION}" >> ${GITHUB_ENV}
                echo -e "LIBP2PRELAY_VERSION=${LIBP2PRELAY_VERSION}" >> ${GITHUB_STEP_SUMMARY}
                echo "GITIPFS_VERSION=${GITIPFS_VERSION}" >> ${GITHUB_ENV}
                echo -e "GITIPFS_VERSION=${GITIPFS_VERSION}\n\`\`\`" >> ${GITHUB_STEP_SUMMARY}
            - name: Version comparison
              id: version_compare
              run: |
                if $(dpkg --compare-versions "${IPFS_KUBO_VERSION}" "gt" "${IPFS_KUBO_VERSION_REPO}")
                then
                    echo -e "\n**IPFS Kubo**: found a release version \`${IPFS_KUBO_VERSION}\` > \`${IPFS_KUBO_VERSION_REPO}\`, running build" >> ${GITHUB_STEP_SUMMARY}
                    echo "kubo=true" >> "$GITHUB_OUTPUT"
                else
                    echo -e "\n**IPFS Kubo**: cannot found a release version, release sources for \`${IPFS_KUBO_VERSION}\` will not be built" >> ${GITHUB_STEP_SUMMARY}
                    echo "kubo=false" >> "$GITHUB_OUTPUT"
                fi
                if $(dpkg --compare-versions "${LIBP2PRELAY_VERSION}" "gt" "${LIBP2PRELAY_VERSION_REPO}")
                then
                    echo -e "\n\`libp2p\` relay daemon: found a release version \`${LIBP2PRELAY_VERSION}\` > \`${LIBP2PRELAY_VERSION_REPO}\`, running build" >> ${GITHUB_STEP_SUMMARY}
                    echo "relay=true" >> "$GITHUB_OUTPUT"
                else
                    echo -e "\n\`libp2p\` **relay daemon**: cannot found a release version, release sources for \`${LIBP2PRELAY_VERSION}\` will not be built" >> ${GITHUB_STEP_SUMMARY}
                    echo "relay=false" >> "$GITHUB_OUTPUT"
                fi
                if $(dpkg --compare-versions "${GITIPFS_VERSION}" "gt" "${GITIPFS_VERSION_REPO}")
                then
                    echo -e "\n**IPFS Git Remote Bridge**: found a release version \`${GITIPFS_VERSION}\` > \`${GITIPFS_VERSION_REPO}\`, running build" >> ${GITHUB_STEP_SUMMARY}
                    echo "ipfsgit=true" >> "$GITHUB_OUTPUT"
                else
                    echo -e "\n**IPFS Git Remote Bridge**: cannot found a release version, release sources for \`${GITIPFS_VERSION}\` will not be built" >> ${GITHUB_STEP_SUMMARY}
                    echo "ipfsgit=false" >> "$GITHUB_OUTPUT"
                fi
    build-kubo:
        runs-on: ubuntu-latest
        timeout-minutes: 5
        needs: version_analyzer
        env:
            build_kubo: ${{needs.version_analyzer.outputs.build_kubo}}
            build_relay: ${{needs.version_analyzer.outputs.build_relay}}
            build_ipfsgit: ${{needs.version_analyzer.outputs.build_ipfsgit}}
        steps:
            - name: Test output transfer
              run: echo -e "\n# Building IPFS Kubo\n\n${build_kubo} ${build_relay} ${build_ipfsgit}" >> ${GITHUB_STEP_SUMMARY}
